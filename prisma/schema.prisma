generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String?             @unique
  phone             String?             @unique
  password_hash     String?
  full_name         String?
  role              String?             @default("artist")
  profile           Json?
  verified          Boolean?            @default(false)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  bookings          bookings[]
  practice_sessions practice_sessions[]
  studios           studios[]
}

model studios {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id          String?             @db.Uuid
  name              String
  description       String?
  location          String?
  capacity          Int?
  price_per_hour    Decimal             @db.Decimal(10, 2)
  amenities         String[]
  verified          Boolean?            @default(false)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  bookings          bookings[]
  practice_sessions practice_sessions[]
  users             users?              @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model bookings {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artist_id         String?             @db.Uuid
  studio_id         String?             @db.Uuid
  start_time        DateTime            @db.Timestamptz(6)
  end_time          DateTime            @db.Timestamptz(6)
  duration_minutes  Int
  amount            Decimal             @db.Decimal(10, 2)
  currency          String?             @default("KES")
  status            String?             @default("pending")
  payment_id        String?             @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  users             users?              @relation(fields: [artist_id], references: [id], onUpdate: NoAction)
  studios           studios?            @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payments          payments[]
  practice_sessions practice_sessions[]
}

model payments {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_id                String?   @db.Uuid
  provider                  String
  provider_reference        String?
  amount                    Decimal?  @db.Decimal(10, 2)
  currency                  String?   @default("KES")
  status                    String?   @default("pending")
  phone_number              String?
  mpesa_merchant_request_id String?
  mpesa_checkout_request_id String?
  mpesa_result_code         Int?
  mpesa_result_desc         String?
  raw_response              Json?
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                DateTime? @updatedAt
  bookings                  bookings? @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model practice_sessions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_id       String?   @db.Uuid
  artist_id        String?   @db.Uuid
  studio_id        String?   @db.Uuid
  recorded_minutes Int?
  exercises        Json?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  users            users?    @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookings         bookings? @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  studios          studios?  @relation(fields: [studio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
